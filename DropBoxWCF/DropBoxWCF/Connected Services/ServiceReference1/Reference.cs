//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DropBoxWCF.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IAccount")]
    public interface IAccount {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccount/Auth", ReplyAction="http://tempuri.org/IAccount/AuthResponse")]
        string Auth(string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccount/Auth", ReplyAction="http://tempuri.org/IAccount/AuthResponse")]
        System.Threading.Tasks.Task<string> AuthAsync(string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccount/Register", ReplyAction="http://tempuri.org/IAccount/RegisterResponse")]
        bool Register(WcfClassesLib.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccount/Register", ReplyAction="http://tempuri.org/IAccount/RegisterResponse")]
        System.Threading.Tasks.Task<bool> RegisterAsync(WcfClassesLib.User user);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAccountChannel : DropBoxWCF.ServiceReference1.IAccount, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AccountClient : System.ServiceModel.ClientBase<DropBoxWCF.ServiceReference1.IAccount>, DropBoxWCF.ServiceReference1.IAccount {
        
        public AccountClient() {
        }
        
        public AccountClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AccountClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AccountClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AccountClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string Auth(string login, string password) {
            return base.Channel.Auth(login, password);
        }
        
        public System.Threading.Tasks.Task<string> AuthAsync(string login, string password) {
            return base.Channel.AuthAsync(login, password);
        }
        
        public bool Register(WcfClassesLib.User user) {
            return base.Channel.Register(user);
        }
        
        public System.Threading.Tasks.Task<bool> RegisterAsync(WcfClassesLib.User user) {
            return base.Channel.RegisterAsync(user);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.ICloud")]
    public interface ICloud {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICloud/GetFolder", ReplyAction="http://tempuri.org/ICloud/GetFolderResponse")]
        WcfClassesLib.Folder GetFolder(string folderHash, string userLogin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICloud/GetFolder", ReplyAction="http://tempuri.org/ICloud/GetFolderResponse")]
        System.Threading.Tasks.Task<WcfClassesLib.Folder> GetFolderAsync(string folderHash, string userLogin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICloud/GetFile", ReplyAction="http://tempuri.org/ICloud/GetFileResponse")]
        WcfClassesLib.File GetFile(string fileHash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICloud/GetFile", ReplyAction="http://tempuri.org/ICloud/GetFileResponse")]
        System.Threading.Tasks.Task<WcfClassesLib.File> GetFileAsync(string fileHash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICloud/GetFolderHashesByName", ReplyAction="http://tempuri.org/ICloud/GetFolderHashesByNameResponse")]
        WcfClassesLib.Folder[] GetFolderHashesByName(string folderName, string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICloud/GetFolderHashesByName", ReplyAction="http://tempuri.org/ICloud/GetFolderHashesByNameResponse")]
        System.Threading.Tasks.Task<WcfClassesLib.Folder[]> GetFolderHashesByNameAsync(string folderName, string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICloud/UploadFile", ReplyAction="http://tempuri.org/ICloud/UploadFileResponse")]
        void UploadFile(string userLogin, string folderHash, string fileName, byte[] file);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICloud/UploadFile", ReplyAction="http://tempuri.org/ICloud/UploadFileResponse")]
        System.Threading.Tasks.Task UploadFileAsync(string userLogin, string folderHash, string fileName, byte[] file);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICloud/CreateFolder", ReplyAction="http://tempuri.org/ICloud/CreateFolderResponse")]
        void CreateFolder(string name, string parentFolderHash, string userLogin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICloud/CreateFolder", ReplyAction="http://tempuri.org/ICloud/CreateFolderResponse")]
        System.Threading.Tasks.Task CreateFolderAsync(string name, string parentFolderHash, string userLogin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICloud/DeleteElement", ReplyAction="http://tempuri.org/ICloud/DeleteElementResponse")]
        void DeleteElement(string hash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICloud/DeleteElement", ReplyAction="http://tempuri.org/ICloud/DeleteElementResponse")]
        System.Threading.Tasks.Task DeleteElementAsync(string hash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICloud/MoveElement", ReplyAction="http://tempuri.org/ICloud/MoveElementResponse")]
        void MoveElement(string hashSource, string hashDestinationFolder);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICloud/MoveElement", ReplyAction="http://tempuri.org/ICloud/MoveElementResponse")]
        System.Threading.Tasks.Task MoveElementAsync(string hashSource, string hashDestinationFolder);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICloudChannel : DropBoxWCF.ServiceReference1.ICloud, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CloudClient : System.ServiceModel.ClientBase<DropBoxWCF.ServiceReference1.ICloud>, DropBoxWCF.ServiceReference1.ICloud {
        
        public CloudClient() {
        }
        
        public CloudClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CloudClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CloudClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CloudClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public WcfClassesLib.Folder GetFolder(string folderHash, string userLogin) {
            return base.Channel.GetFolder(folderHash, userLogin);
        }
        
        public System.Threading.Tasks.Task<WcfClassesLib.Folder> GetFolderAsync(string folderHash, string userLogin) {
            return base.Channel.GetFolderAsync(folderHash, userLogin);
        }
        
        public WcfClassesLib.File GetFile(string fileHash) {
            return base.Channel.GetFile(fileHash);
        }
        
        public System.Threading.Tasks.Task<WcfClassesLib.File> GetFileAsync(string fileHash) {
            return base.Channel.GetFileAsync(fileHash);
        }
        
        public WcfClassesLib.Folder[] GetFolderHashesByName(string folderName, string login) {
            return base.Channel.GetFolderHashesByName(folderName, login);
        }
        
        public System.Threading.Tasks.Task<WcfClassesLib.Folder[]> GetFolderHashesByNameAsync(string folderName, string login) {
            return base.Channel.GetFolderHashesByNameAsync(folderName, login);
        }
        
        public void UploadFile(string userLogin, string folderHash, string fileName, byte[] file) {
            base.Channel.UploadFile(userLogin, folderHash, fileName, file);
        }
        
        public System.Threading.Tasks.Task UploadFileAsync(string userLogin, string folderHash, string fileName, byte[] file) {
            return base.Channel.UploadFileAsync(userLogin, folderHash, fileName, file);
        }
        
        public void CreateFolder(string name, string parentFolderHash, string userLogin) {
            base.Channel.CreateFolder(name, parentFolderHash, userLogin);
        }
        
        public System.Threading.Tasks.Task CreateFolderAsync(string name, string parentFolderHash, string userLogin) {
            return base.Channel.CreateFolderAsync(name, parentFolderHash, userLogin);
        }
        
        public void DeleteElement(string hash) {
            base.Channel.DeleteElement(hash);
        }
        
        public System.Threading.Tasks.Task DeleteElementAsync(string hash) {
            return base.Channel.DeleteElementAsync(hash);
        }
        
        public void MoveElement(string hashSource, string hashDestinationFolder) {
            base.Channel.MoveElement(hashSource, hashDestinationFolder);
        }
        
        public System.Threading.Tasks.Task MoveElementAsync(string hashSource, string hashDestinationFolder) {
            return base.Channel.MoveElementAsync(hashSource, hashDestinationFolder);
        }
    }
}
